package com.network.TCPUDP.client;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;

public class TCPclient implements client {

	static boolean connected = false;
	
	static InetAddress server = null;
	
	static InetAddress local = null;
	
	static Socket s = null;
	
	static int server_port = 0;
	
	static PrintWriter outToServer;
	
	static OutputStream outToServerOS;
	
	@Override
	public void connect(String ServeripAddress, int Port) {
		server_port = Port;
		try {
			server = InetAddress.getByName(ServeripAddress);
			s = new Socket(server, server_port);
			connected = true;
			outToServerOS = s.getOutputStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean isConnected() {
		return connected;
	}

	@Override
	public boolean sendData(String sMessage) {
		try {
			outToServer = new PrintWriter(s.getOutputStream(),true);
			outToServer.print(sMessage + "\r\n");
			outToServer.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean sendData(byte[] Message) {
		try {
			outToServerOS.write(Message);
			outToServerOS.flush();
			for (byte b : Message) {
				System.out.println(Integer.toHexString(b));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	
	@Override
	public String receiveMessage() {
		String sMessage = "";
		try {
			BufferedReader inFromServer = new BufferedReader(new InputStreamReader(s.getInputStream()));
			sMessage = inFromServer.readLine();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sMessage;
	}

	@Override
	public void disconnect() {
		try {
			s.close();
			connected = false;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
